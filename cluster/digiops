#!/bin/bash

base_dir=~/
digi_dir=${base_dir}digikube/

. ${digi_dir}utility/general.sh
. ${digi_dir}utility/log.sh
. ${digi_dir}common/digikube-config.sh


function get-cluster-config {
    
    #Function to get the digikube configuration details.
    __function_name="cluster/digiops.get-cluster-config"

    #This environment variable is required.
    export KOPS_FEATURE_FLAGS=$(get-config-value "cluster.kops.featureFlags")
    export KOPS_STATE_STORE="gs://$(get-config-value 'cloud.bucket.name')"
    
    kops_feature_flags=${KOPS_FEATURE_FLAGS}
    kops_state_store=${KOPS_STATE_STORE}
    kops_cloud=$(get-config-value "cloud.provider")
    kops_project=$(get-config-value "cloud.project.name")
    kops_vpc=$(get-config-value "cloud.project.vpc")
    kops_env=$(get-config-value "cluster.kops.env")
    kops_cluster_prefix=$(get-config-value "cluster.kops.name.prefix")
    kops_cluster_suffix=$(get-config-value "cluster.kops.name.suffix")
    
    if [[ -z ${kops_cluster_prefix} ]]; then
        if [[ -z ${kops_cluster_suffix} ]]; then
            kops_cluster_name=${kops_project}.${kops_env}.k8s.local
        else
            kops_cluster_name=${kops_project}.${kops_env}.${kops_cluster_suffix}
        fi
    else
        if [[ -z ${kops_cluster_suffix} ]]; then
            kops_cluster_name=${kops_cluster_prefix}.${kops_env}.${kops_project}.k8s.local
        else
            kops_cluster_name=${kops_cluster_prefix}.${kops_env}.${kops_cluster_suffix}
        fi
    fi
  
    kops_region=$(get-config-value "cloud.project.region")
    kops_master_zones=$(get-config-value "cloud.project.zone")
    kops_worker_zones=$(get-config-value "cloud.project.zone")

}

function validate-cluster {
    
    #Function to validate the cluster.
    __function_name="cluster/digiops.validate-cluster"
    
    get-cluster-config
    if [[ $? -gt 0 ]]; then
        log_it "${__function_name}" "installer" "ERR" "2110" "Error while getting cluster configuration details"
        exit 1
    fi

    #First check if cluster available with the same name
    kops get cluster                     \
        --name=${kops_cluster_name}      \
        --state=${kops_state_store}

    __kops_exit_status=$?
    if [[ ${__kops_exit_status} -gt 0 ]]; then
        log_it "${__function_name}" "installer" "ERR" "2110" "No cluster available for validation"
        exit 1
    fi
    
    __kops_exit_status=1
    __loop_count=0
    __max_loop_count=60
    __loop_sleep_duration=5 
    
    while [ ${__kops_exit_status} -gt 0 ]
    do
        kops validate cluster --state=${kops_state_store}
        __kops_exit_status=$?
        __loop_count=${__loop_count}+1
        if [[ ${__loop_count} -gt ${__max_loop_count} ]]; then
            break
        fi
        sleep ${__loop_sleep_duration}
    done
    
    if [[ ${__loop_count} -gt ${__max_loop_count} ]]; then
        #This is timeout condition
        log_it "${__function_name}" "installer" "ERR" "2110" "Timeout while validating cluster"
        exit 1
    else
        log_it "${__function_name}" "installer" "DEBUG" "2110" "Cluster validated"
    fi

}

function update-cluster {
    
    #Function to update cluster.
    __function_name="cluster/digiops.update-cluster"
    
    log_it "${__function_name}" "installer" "INFO" "2110" "Updating cluster configurations"
    
    get-cluster-config
    if [[ $? -gt 0 ]]; then
        log_it "${__function_name}" "installer" "ERR" "2110" "Error while getting cluster configuration details"
        exit 1
    fi
    
    #First check if cluster available with the same name
    kops get cluster                     \
        --name=${kops_cluster_name}      \
        --state=${kops_state_store}

    __kops_exit_status=$?
    if [[ ${__kops_exit_status} -gt 0 ]]; then
        log_it "${__function_name}" "installer" "ERR" "2110" "No cluster available for updation"
        exit 1
    fi
    
    #TODO: Need to get updated cluster configurations and apply
    kops update cluster                   \
        --state=${kops_state_store}
        
    __kops_exit_status=$?
    if [[ ${__kops_exit_status} -gt 0 ]]; then 
        log_it "${__function_name}" "installer" "ERR" "2110" "Error while updating cluster"
        exit 1
    else
        log_it "${__function_name}" "installer" "INFO" "2110" "Cluster updated successfully.  Waiting for initialization"
    fi
    
    validate-cluster
    __kops_exit_status=$?
    if [[ ${__kops_exit_status} -gt 0 ]]; then 
        exit 1
    fi
    
}

function create-cluster {

    #Function to create cluster.
    __function_name="cluster/digiops.create-cluster"

    log_it "${__function_name}" "installer" "INFO" "2110" "Started the cluster installation process"

    get-cluster-config
    if [[ $? -gt 0 ]]; then
        log_it "${__function_name}" "installer" "ERR" "2110" "Error while getting cluster configuration details"
        exit 1
    fi

    #First check if cluster available with the same name
    kops get cluster                     \
        --name=${kops_cluster_name}      \
        --state=${kops_state_store}

    __kops_exit_status=$?
    if [[ ${__kops_exit_status} -gt 0 ]]; then
 
        #create cluster
        kops create cluster                     \
            --name=${kops_cluster_name}         \
            --cloud=${kops_cloud}               \
            --project=${kops_project}           \
            --master-zones=${kops_master_zones} \
            --zones=${kops_worker_zones}        \
            --cloud-labels=${kops_env_type}     \
            --master-count=1                    \
            --master-size=g1-small              \
            --master-volume-size=10             \
            --node-count=2                      \
            --node-size=g1-small                \
            --node-volume-size=10               \
            --associate-public-ip=false         \
            --api-loadbalancer-type=public      \
            --authorization=RBAC                \
            --etcd-storage-type=pd-standard     \
            --state=${kops_state_store}         \
            --yes

        __kops_exit_status=$?
        if [[ ${__kops_exit_status} -gt 0 ]]; then
            log_it "${__function_name}" "installer" "ERR" "2110" "Error while creating kops cluster"
            exit 1
        else
            log_it "${__function_name}" "installer" "INFO" "2110" "Cluster created successfully.  Waiting for initialization"
      
            validate-cluster
            __kops_exit_status=$?
            if [[ __kops_exit_status -gt 0 ]]; then
                exit 1
            fi
        fi
    
    else
        log_it "${__function_name}" "installer" "INFO" "2110" "Reusing existing cluster."
        update-cluster
        __kops_exit_status=$?
        if [[ __kops_exit_status -gt 0 ]]; then
            exit 1
        fi
    fi    
   
}

function delete-cluster {
    
    #Function to create cluster.
    __function_name="cluster/digiops.delete-cluster"

    log_it "${__function_name}" "installer" "INFO" "2110" "Started the cluster deletion process"

    get-cluster-config
    if [[ $? -gt 0 ]]; then
        log_it "${__function_name}" "installer" "ERR" "2110" "Error while getting cluster configuration details"
        exit 1
    fi

    #First check if cluster available with the same name
    kops get cluster                     \
        --name=${kops_cluster_name}      \
        --state=${kops_state_store}

    __kops_exit_status=$?
    if [[ ${__kops_exit_status} -gt 0 ]]; then
        log_it "${__function_name}" "installer" "ERR" "2110" "No cluster available for deletion"
        exit 1
    fi
    
    kops delete cluster                 \
        --name=${kops_cluster_name}     \
        --state=${kops_state_store}     \
        --yes
    
    __kops_exit_status=$?
    if [[ ${__kops_exit_status} -gt 0 ]]; then
        log_it "${__function_name}" "installer" "ERR" "2110" "Error while deleting cluster"
        exit 1
    else
        log_it "${__function_name}" "installer" "INFO" "2110" "Cluster deleted"
    fi
    
}

function stop-cluster {

    #Function to create cluster.
    __function_name="cluster/digiops.stop-cluster"

    log_it "${__function_name}" "installer" "INFO" "2110" "Started the cluster shutdown process"

    get-cluster-config
    if [[ $? -gt 0 ]]; then
        log_it "${__function_name}" "installer" "ERR" "2110" "Error while getting cluster configuration details"
        exit 1
    fi

    #First check if cluster available with the same name
    kops get cluster                     \
        --name=${kops_cluster_name}      \
        --state=${kops_state_store}

    __kops_exit_status=$?
    if [[ ${__kops_exit_status} -gt 0 ]]; then
        log_it "${__function_name}" "installer" "ERR" "2110" "No cluster available for shutdown"
        exit 1
    fi
    
    ig_zero_master_config="${digi_dir}config/templates/ig-zero-master-config-template.yaml"
    ig_zero_node_config="${digi_dir}config/templates/ig-zero-node-config-template.yaml"
    
    #kops replace -f=${ig_zero_master_config} --state=${kops_state_store}
    $(cat ${ig_zero_master_config} | envsubst) | kops replace -f - --state=${kops_state_store}
    #kops replace -f=${ig_zero_node_config} --state=${kops_state_store}
    $(cat ${ig_zero_node_config} | envsubst) | kops replace -f - --state=${kops_state_store}

    update-cluster

    resources_name=${kops_cluster_name}
    echo ${resource_name}
    resource_name=${resource_name//[_.]/-}
    echo ${resource_name}
    resource_name=api-${resource_name}
    echo ${resource_name}

    echo "Waiting for 120 seconds for cluster to shutdown"
    sleep 120
    echo "Deleting additional cloud resources"
    gcloud compute forwarding-rules delete ${resource_name} --region=${kops_region} --quiet
    sleep 30
    gcloud compute addresses  delete ${resource_name} --region=${kops_region} --quiet
    sleep 30
    gcloud compute target-pools delete ${resource_name} --region=${kops_region} --quiet

}

function start-cluster {

    #Function to create cluster.
    __function_name="cluster/digiops.start-cluster"
#
#    log_it "${__function_name}" "installer" "INFO" "2110" "Started the cluster start process"#
#
#    get-cluster-config
#    if [[ $? -gt 0 ]]; then
#        log_it "${__function_name}" "installer" "ERR" "2110" "Error while getting cluster configuration details"
#        exit 1
#    fi
#
#    #First check if cluster available with the same name
#    kops get cluster                     \
#        --name=${kops_cluster_name}      \
#        --state=${kops_state_store}
#
#    __kops_exit_status=$?
#    if [[ ${__kops_exit_status} -gt 0 ]]; then
#        log_it "${__function_name}" "installer" "ERR" "2110" "No cluster available for start"
#        exit 1
#    fi
#    
#    ig_base_master_config="${digi_dir}config/ig-base-master-config-template.yaml"
#    ig_base_node_config="${digi_dir}config/ig-base-node-config-template.yaml"
#    
#    kops replace -f="${ig_base_master_config}" --state=${kops_state_store}
#    kops replace -f="${ig_base_node_config}" --state=${kops_state_store}
#
#    update-cluster
    
}

if [[ $# -gt 0 ]]; then
    
    action_option=${1}
    case ${action_option} in 
		"delete-cluster")
                		delete-cluster
                            	;;
		"stop-cluster")
				stop-cluster
				;;
        *)
    esac

fi
