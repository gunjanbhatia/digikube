#!/bin/bash
#OM for kubectl based sample apps

base_dir=~/
digi_dir=${base_dir}digikube/

. ${digi_dir}utility/general.sh
. ${digi_dir}utility/log.sh
. ${digi_dir}common/digikube-config.sh
   
digikube_config=${digi_dir}config/digikube-config.yaml
parse_yaml ${digikube_config} "__config_"

function create {

	__function_name="cluster/sample-apps-om/kubectl-apply-om.create"
	
	sample_app_name="${1}"
	sample_app_command_param="${2}"

	app_name=$(get-config-value "cluster.sampleApps.${sample_app_name}.deploymentEngine.appName")
	app_config=$(get-config-value "cluster.sampleApps.${sample_app_name}.deploymentEngine.appConfig")
	app_config_file=${digi_dir}config/sample-apps/${app_config}
	app_namespace=$(get-config-value "cluster.sampleApps.${sample_app_name}.deploymentEngine.namespace")
	
	kubectl get namespace ${app_namespace}
	if [[ ${?} -gt 0 ]]; then
		echo "Namespace not available: ${app_namespace}.  Creating new"
		kubectl create namespace ${app_namespace}
		if [[ ${?} -gt 0 ]]; then
			echo "Error while creating namespace: ${app_namespace}.  Aborting."
			exit 1
		else
			echo "Created namespace: ${app_namespace}"
		fi
	fi
	
	kubectl get deployment ${app_name} --namespace ${app_namespace}
	if [[ ${?} -gt 0 ]]; then
		echo "kubectl create --namespace ${app_namespace} -f ${app_config_file}"
		kubectl apply --namespace ${app_namespace} -f ${app_config_file}
	else
		echo "Application already available with name: ${app_namespace}.  Please delete it or use update command."
		exit 1
	fi
}

function delete {

	__function_name="cluster/sample-apps-om/kubectl-apply-om.delete"
	
	sample_app_name="${1}"
	sample_app_command_param="${2}"

	app_name=$(get-config-value "cluster.sampleApps.${sample_app_name}.deploymentEngine.appName")
	app_namespace=$(get-config-value "cluster.sampleApps.${sample_app_name}.deploymentEngine.namespace")
	
	kubectl get namespace ${app_namespace}
	if [[ ${?} -gt 0 ]]; then
		echo "Namespace not available: ${app_namespace}.  Aborting"
		exit 1
	fi
	
	kubectl get deployment ${app_name} --namespace ${app_namespace}
	if [[ ${?} -gt 0 ]]; then
		echo "No application available with name: ${app_name}. Aborting."
		exit 1
	else
		echo "kubectl delete ${app_name} --namespace ${app_namespace}"
		kubectl delete ${app_name} --namespace ${app_namespace}
	fi
}

shell_command_option=${2}
case ${shell_command_option} in 
	"create")	
		create "${1}" "${3}"
		;;
	"delete")
		delete "${1}" "${3}"
		;;
	"update")
		update "${1}" "${3}"
		;;
	*)
		echo "Command not known: ${shell_command_option}"
esac
