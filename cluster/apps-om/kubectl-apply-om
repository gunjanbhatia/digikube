#!/bin/bash
#OM for kubectl-apply based apps

base_dir=~/
digi_dir=${base_dir}digikube/

. ${digi_dir}utility/general.sh
. ${digi_dir}utility/log.sh
. ${digi_dir}common/digikube-config.sh
   
digikube_config=${digi_dir}config/digikube-config.yaml
parse_yaml ${digikube_config} "__config_"

function create {

	__function_name="cluster/apps-om/kubectl-apply-om.create"
	
	app_type="${1}"
	app_name="${2}"
	app_command_param="${3}"

	#config_file_name=$(get-config-value "cluster.${app_type}.${app_name}.deploymentEngine.configFileName")
	config_file_name=${app_command_param}
	config_file_path=${digi_dir}cluster/${app_type}/${app_name}/config/${config_file_name}
	release_namespace=$(get-config-value "cluster.${app_type}.${app_name}.deploymentEngine.namespace")
	
	#pre_execution_hook_shell=${digi_dir}cluster/${app_type}/${app_name}/bin/pre-execution-hook
	#if [[ -f ${pre_execution_hook_shell} ]]; then
	#	${pre_execution_hook_shell} create
	#	if [[ ${?} -gt 0 ]]; then
	#		echo "error"
	#		exit 1
	#	fi
	#fi
	
	kubectl get namespace ${release_namespace}
	if [[ ${?} -gt 0 ]]; then
		echo "Namespace not available: ${release_namespace}.  Creating new"
		kubectl create namespace ${release_namespace}
		if [[ ${?} -gt 0 ]]; then
			echo "Error while creating namespace: ${release_namespace}.  Aborting."
			exit 1
		else
			echo "Created namespace: ${release_namespace}"
		fi
	fi
	
	echo "kubectl apply -f ${config_file_path} --namespace ${release_namespace}"
	kubectl apply -f "${config_file_path}" --namespace "${release_namespace}"
	echo "Installation done... executing post installation hooks"
	#post_execution_hook_shell=${digi_dir}cluster/${app_type}/${app_name}/bin/post-execution-hook
	#if [[ -f ${post_execution_hook_shell} ]]; then
	#	${post_execution_hook_shell} create
	#	if [[ ${?} -gt 0 ]]; then
	#		echo "error"
	#		exit 1
	#	fi
	#fi

}

function delete {

	__function_name="cluster/apps-om/kubectl-apply-om.delete"
	
	app_type="${1}"
	app_name="${2}"
	app_command_param="${3}"

	#config_file_name=$(get-config-value "cluster.${app_type}.${app_name}.deploymentEngine.configFileName")
	config_file_name=${app_command_param}
	config_file_path=${digi_dir}cluster/${app_type}/${app_name}/config/${config_file_name}
	release_namespace=$(get-config-value "cluster.${app_type}.${app_name}.deploymentEngine.namespace")
	
	kubectl get namespace ${release_namespace}
	if [[ ${?} -gt 0 ]]; then
		echo "Namespace not available: ${release_namespace}.  Aborting"
		exit 1
	fi
	
	echo "kubectl delete -f ${config_file_path} --namespace ${release_namespace}"
	kubectl delete -f "${config_file_path}" --namespace "${release_namespace}"
	echo "Deleted resources"

}

function get_release {

	__function_name="cluster/apps-om/helm-chart-om.get_release"
	
	app_type="${1}"
	app_name="${2}"
	app_command_param="${3}"

	release_name=$(get-config-value "cluster.${app_type}.${app_name}.deploymentEngine.releaseName")
	release_namespace=$(get-config-value "cluster.${app_type}.${app_name}.deploymentEngine.namespace")
	
	echo "kubectl get deployment -l release=${release_name} --namespace ${release_namespace} |  sed -n 2p | awk '{print $1;}'"
	__deployment=$(kubectl get deployment -l release=${release_name} --namespace ${release_namespace} |  sed -n 2p | awk '{print $1;}')
	#kubectl get deployment -l release=${release_name} --namespace ${release_namespace}
	if [[ -z ${__deployment} ]]; then
		echo "No release available with name: ${release_name}."
		exit 1
	else
		echo "Release available with name: ${release_name} in namespace: ${release_namespace}."
	fi
}

app_type="${1}"
app_name="${2}"
app_command_option=${3}
app_command_param="${4}"

#This will load additional command options (like validate, downgrade, clean, purge, deep-delete, etc.)
echo "om_extension_shell=${digi_dir}cluster/${app_type}/${app_name}/bin/om-extension"
om_extension_shell=${digi_dir}cluster/${app_type}/${app_name}/bin/om-extension
if [[ -f ${om_extension_shell} ]]; then
	echo "Extension shell available"	
	. ${om_extension_shell} 
	if [[ ${?} -gt 0 ]]; then
		echo "error"
		exit 1
	fi
else
	echo "Extension shell not available"
fi

case ${app_command_option} in 
	"create")	
		create "${app_type}" "${app_name}" "${app_command_param}"
		;;
	"delete")
		delete "${app_type}" "${app_name}" "${app_command_param}"
		;;
	"update")
		update "${app_type}" "${app_name}" "${app_command_param}"
		;;
	"getRelease")
		echo "get_release ${app_type} ${app_name} ${app_command_param}"
		get_release "${app_type}" "${app_name}" "${app_command_param}"
		;;
	*)
		#echo "Command not known: ${shell_command_option}"
		echo "${app_command_option} ${app_type} ${app_name} ${app_command_param}"
		${app_command_option} "${app_type}" "${app_name}" "${app_command_param}"
		__return_code=$?
		if [[ ${__return_code} -eq 127 ]]; then
			echo "Command not available ${app_command_option}"
			exit 1
		else
			if [[ ${__return_code} -gt 0 ]]; then
				echo "Error while executing command ${app_command_option}"
				exit 1
			else
				echo "Command ${app_command_option} executed"
			fi
		fi
esac
