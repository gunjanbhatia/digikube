#!/bin/bash
# kops installer

base_dir=~/
digi_dir=${base_dir}digikube/

. ${digi_dir}utility/general.sh
. ${digi_dir}utility/log.sh

digikube_config=${digi_dir}config/digikube-config.yaml
parse_yaml ${digikube_config} "__config_"

function deploy {

    __function_name="cluster/sys-apps-om/helm-om"
    
    log_it "${__function_name}" "installer" "INFO" "1210" "Started the helm installation process"

    helm_enabled=${__config_cluster_sysApps_helm_enabled}
    log_it "${__function_name}" "installer" "DEBUG" "1215" "Helm is enabled in configuration"

    helm_download_version=${__config_cluster_sysApps_helm_version}
    log_it "${__function_name}" "installer" "DEBUG" "1215" "Helm version to be installed is : ${helm_download_version}"
    
    helm_existing_version=""
    helm_download_url=${__config_cluster_sysApps_helm_url}
    log_it "${__function_name}" "installer" "DEBUG" "1220" "Helm download site is: ${helm_download_url}"
    
    helm_existing_path=$(which helm)
    if [[ $? -gt 0 ]]; then
        log_it "${__function_name}" "installer" "WARN" "1225" "Error while checking if helm is already installed.  Ignoring and proceeding"
    fi

    if [[ -f ${helm_existing_path} ]]; then

        log_it "${__function_name}" "installer" "INFO" "1230" "Helm binary already available at path: ${helm_existing_path}"
        helm_existing_version=$(helm version | grep Client | cut -d '\"' -f 2 )
        
        if [[ "$helm_existing_version" = "$helm_download_version" ]]; then
            log_it "${__function_name}" "installer" "INFO" "1235" "Pre-existing helm binary version is same as expected target version: ${helm_download_version}. Using the pre-existing helm binary."
        else
            log_it "${__function_name}" "installer" "ERR" "1240" "Pre-existing helm binary version is: ${helm_existing_version}.  Target version of helm is: ${helm_download_version}. Aborting helm installation.  Remove existing helm binary and rerun the installation."
            exit 1
        fi 
    
#    else

        #helm not available.  Download and install
#        download_file $helm_download_url helm_binary
#        if [[ $? -gt 0 ]]; then
#            log_it "${__function_name}" "installer" "ERR" "1245" "Error while downloading helm binary"
#            exit 1
#        fi
    
#        if [[ -f ${helm_binary} ]]; then

#            log_it "${__function_name}" "installer" "DEBUG" "1250" "Downloaded helm binary at: ${helm_binary}"
        
#            file ${helm_binary} | grep gzip
#            if [[ $? -gt 0 ]]; then
#                var1=""
#            else
#                log_it "${__function_name}" "installer" "INFO" "1255" "Helm binary is compressed file.  Need to unzip."
#                helm_binary_compressed=${helm_binary}
#                helm_file_name="helm"
#                helm_binary=""
#                unzip_file ${helm_binary_compressed} ${helm_file_name} lelm_binary
#            if [[ $? -gt 0 ]]; then
#                log_it "${__function_name}" "installer" "ERR" "1255" "Error while unzipping helm binary"
#                exit 1
#            else
#                log_it "${__function_name}" "installer" "DEBUG" "1260" "Unzipped helm binary"
#            fi
#        fi
        
#        chmod +x ${helm_binary}
#        if [[ $? -gt 0 ]]; then
#            log_it "${__function_name}" "installer" "ERR" "1255" "Error while changing the file perimissions for the downloaded helm binary"
#            exit 1
#        else
#            log_it "${__function_name}" "installer" "DEBUG" "1260" "Changed the access permission of helm binary"
#        fi

#        helm_download_version=$($helm_binary version | grep Client | cut -d '\"' -f 2 )
#        log_it "${__function_name}" "installer" "DEBUG" "1265" "Downloaded helm version is: $helm_download_version"
        
#        helm_local_path=${__config_component_helm_localPath}
#        sudo mv ${helm_binary} ${helm_local_path}
#        _exit_code=$?
#        if [[ $? -gt 0 ]]; then
#            log_it "${__function_name}" "installer" "ERR" "1270" "Error while moving helm binary to ${helm_local_path}"
#            exit 1
#        else        
#            if [[ -f "${helm_local_path}" ]]; then
#                log_it "${__function_name}" "installer" "DEBUG" "1274" "Moved helm binary to ${helm_local_path}"
#            else
#                log_it "${__function_name}" "installer" "ERR" "1278" "Error while moving helm binary to ${helm_local_path}"
#                exit 1
#            fi
#        fi
        
#        #Check if helm binary is in path
#        helm_new_path=$(which helm)
#        if [[ $? -gt 0 ]]; then
#            log_it "${__function_name}" "installer" "ERR" "1280" "Error while checking if helm binary is in path"
#            exit 1
#        fi
#       if [[ "${helm_new_path}" = "${helm_local_path}" ]]; then
#           log_it "${__function_name}" "installer" "DEBUG" "1282" "helm binary is in path"
#       else 
#           log_it "${__function_name}" "installer" "ERR" "1284" "Different helm binary is available in path."
#           exit 1
#       fi
        
#        helm_inpath_version=$(helm version | grep Client | cut -d '\"' -f 2 )
#        if [[ "${helm_inpath_version}" = "${helm_download_version}" ]]; then
#            log_it "${__function_name}" "installer" "DEBUG" "1286" "helm binary in path has version: $helm_download_version"
#            log_it "${__function_name}" "installer" "INFO" "1288" "Successfully installed helm version: $helm_download_version"
#        else
#            log_it "${__function_name}" "installer" "ERR" "1290" "Incorrect version of helm binary in path.  Expected version: ${helm_download_version} Actual version: ${helm_inpath_version}"
#        fi
    else
        log_it "${__function_name}" "installer" "ERR" "1292" "Not able to get handle on downloaded helm binary"
        exit 1  
    fi
}

function delete {
    echo "Command 'helm delete' not yet implemented"
}

function update {
    echo "Command 'helm update' not yet implemented"
}
