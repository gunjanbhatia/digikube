#!/bin/bash
#OM for helm chart based system apps

base_dir=~/
digi_dir=${base_dir}digikube/

. ${digi_dir}utility/general.sh
. ${digi_dir}utility/log.sh
. ${digi_dir}common/digikube-config.sh
   
digikube_config=${digi_dir}config/digikube-config.yaml
parse_yaml ${digikube_config} "__config_"

function create {

	__function_name="cluster/sys-apps-om/helm-chart-om.create"
	
	sys_app_name="${1}"
	sys_app_command_param="${2}"

	chart_name=$(get-config-value "cluster.sysApps.${sys_app_name}.deploymentEngine.chartName")
	chart_repo=$(get-config-value "cluster.sysApps.${sys_app_name}.deploymentEngine.chartRepo")
	release_name=$(get-config-value "cluster.sysApps.${sys_app_name}.deploymentEngine.releaseName")
	chart_values=$(get-config-value "cluster.sysApps.${sys_app_name}.deploymentEngine.chartValues")
	chart_values_file=${digi_dir}config/sys-apps/${chart_values}
	release_namespace=$(get-config-value "cluster.sysApps.${sys_app_name}.deploymentEngine.namespace")
	
	kubectl get namespace ${release_namespace}
	if [[ ${?} -gt 0 ]]; then
		echo "Namespace not available: ${release_namespace}.  Creating new"
		kubectl create namespace ${release_namespace}
		if [[ ${?} -gt 0 ]]; then
			echo "Error while creating namespace: ${release_namespace}.  Aborting."
			exit 1
		else
			echo "Created namespace: ${release_namespace}"
		fi
	fi
	
	kubectl get deployment ${release_name} --namespace ${release_namespace}
	if [[ ${?} -gt 0 ]]; then
		echo "helm install ${release_name} ${chart_name} --namespace ${release_namespace} -f ${chart_values_file}"
		helm repo add stable ${chart_repo}
		helm repo update
		helm install ${release_name} ${chart_name} --namespace ${release_namespace} -f ${chart_values_file}
	else
		echo "Release already available with name: ${release_namespace}.  Please delete it or use update command."
		exit 1
	fi
}

function delete {

	__function_name="cluster/sys-apps-om/helm-chart-om.delete"
	
	sys_app_name="${1}"
	sys_app_command_param="${2}"

	release_name=$(get-config-value "cluster.sysApps.${sys_app_name}.deploymentEngine.releaseName")
	release_namespace=$(get-config-value "cluster.sysApps.${sys_app_name}.deploymentEngine.namespace")
	
	kubectl get namespace ${release_namespace}
	if [[ ${?} -gt 0 ]]; then
		echo "Namespace not available: ${release_namespace}.  Aborting"
		exit 1
	fi
	
	kubectl get deployment -l release=${release_name} --namespace ${release_namespace}
	if [[ ${?} -gt 0 ]]; then
		echo "No release available with name: ${release_name}. Aborting."
		exit 1
	else
		echo "helm delete ${release_name} --namespace ${release_namespace}"
		helm delete ${release_name} --namespace ${release_namespace}
	fi
}

shell_command_option=${2}
case ${shell_command_option} in 
	"create")	
		create "${1}" "${3}"
		;;
	"delete")
		delete "${1}" "${3}"
		;;
	"update")
		update "${1}" "${3}"
		;;
	*)
		echo "Command not known: ${shell_command_option}"
esac
